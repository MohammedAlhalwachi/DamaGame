{"version":3,"sources":["../script.js"],"names":["boardElem","document","getElementById","window","innerWidth","innerHeight","style","width","height","onload","maxWindow","moveTo","all","top","resizeTo","screen","availWidth","availHeight","layers","outerHeight","outerWidth","cellWidth","getElementsByClassName","getBoundingClientRect","DamaPiece","type","isKing","row","column","cellElem","querySelector","playableTo","eatableTo","imgElem","canEat","damaPiece","makePlayableTo","classList","add","clearPlayable","TweenMax","to","opacity","onComplete","makeNull","Board","boardColors","boardPieces","map","rowArray","cellItem","turn","canEatAgain","render","updateCanEat","damaPieceNew","push","piece","showEatable","removeCanEat","forwardRow","forwardColumn","getDamaPieceOn","steps","base","forwardPiece","getForwardDamaPieceOfYellow","getForwardDamaPieceOfBlack","getForwardDamaPiece","rightRow","rightColumn","rightPiece","getRightDamaPieceOfYellow","getRightDamaPieceOfBlack","getRightDamaPiece","leftPiece","getLeftDamaPieceOfYellow","getLeftDamaPieceOfBlack","getLeftDamaPiece","backwardRow","backwardColumn","backwardPiece","getBackwardDamaPieceOfYellow","getBackwardDamaPieceOfBlack","getBackwardDamaPiece","$","data","filter","e","forEach","playable","removeClass","tile","damaPiece1","damaPiece2","damaPiece1Bounding","damaPiece2Bounding","diffX","x","diffY","y","newRow","newColumn","oldRow","oldColumn","newDamaPiece","checkKing","changeTurn","checkCanEat","diff","diffBetweenDamaPieces","animationObj","bottom","right","lazy","setDamaPieceOn","clearAllPlayable","direction","directions","surroundingPieces","showFreeSpaceToMoveForMan","showFreeSpaceToMoveForKing","surroundingPiece","firstEncounterForward","firstEncounterBackward","firstEncounterRight","firstEncounterLeft","show","doubleForwardPiece","forwardNotNull","doubleBackwardPiece","backwardNotNull","doubleRightPiece","rightNotNull","doubleLeftPiece","leftNotNull","oppositeOf","makeEatableTo","doubleSurroundingPieces","i","length","doubleSurroundingPiece","showEatableForMan","showEatableForKing","toCheck","pushCanEat","typeCanEat","includes","showFreeSpaceToMove","eaten","moved","move","when","then","undefined","onMove","handleClickDamaPiece","handleClickTile","image","Image","src","append","remove","yellowCount","blackCount","wonText","css","display","console","log","clearImages","boardPiecesRow","setImage","checkWin","boardObj","click","handleClick"],"mappings":"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","sourcesContent":["//make board in center\r\nlet boardElem = document.getElementById('board');\r\n\r\nif(window.innerWidth > window.innerHeight){\r\n    //width > height\r\n    \r\n    boardElem.style.width = \"90vh\";\r\n    boardElem.style.height = \"90vh\";\r\n}else{\r\n    //width < height\r\n    \r\n    boardElem.style.width = \"95vw\";\r\n    boardElem.style.height = \"95vw\";\r\n}\r\n\r\nwindow.onload = maxWindow;\r\n\r\nfunction maxWindow() {\r\n    window.moveTo(0, 0);\r\n\r\n    if (document.all) {\r\n        top.window.resizeTo(screen.availWidth, screen.availHeight);\r\n    }\r\n\r\n    else if (document.layers || document.getElementById) {\r\n        if (top.window.outerHeight < screen.availHeight || top.window.outerWidth < screen.availWidth) {\r\n            top.window.outerHeight = screen.availHeight;\r\n            top.window.outerWidth = screen.availWidth;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// document.documentElement.requestFullscreen();\r\n\r\nlet cellWidth = document.getElementsByClassName('cell')[0].getBoundingClientRect().width;\r\n\r\n\r\n\r\n\r\n\r\nclass DamaPiece{\r\n    // type;\r\n    // isKing;\r\n    // row;\r\n    // column;\r\n    // cellElem;\r\n    // imgElem;\r\n    // eatableTo;\r\n    // canEat;\r\n\r\n    constructor(type, isKing, row, column){\r\n        this.type = type;\r\n        this.isKing = isKing;\r\n        this.row = row;\r\n        this.column = column;\r\n        this.cellElem = document.querySelector('.cell[data-row=\"' + this.row + '\"][data-column=\"' + this.column + '\"]');\r\n        this.playableTo = null;\r\n        this.eatableTo = null;\r\n        this.imgElem = null;\r\n        this.canEat = null;\r\n    }\r\n\r\n    oppositeOf(damaPiece){\r\n        return (this.type === 'yellow' && damaPiece.type === 'black') || (this.type === 'black' && damaPiece.type === 'yellow');\r\n    }\r\n    \r\n    oppositeType(){\r\n        if(this.type === 'black')\r\n            return 'yellow';\r\n        else if(this.type === 'yellow')\r\n            return 'black';\r\n        else\r\n            throw 'No opposite of null';\r\n    }\r\n\r\n    makeEatableTo(damaPiece, canEat){\r\n        //this is a tile\r\n        //damaPiece who can eat\r\n        //canEat who will get eaten\r\n\r\n        this.eatableTo = damaPiece;\r\n        this.canEat = canEat;\r\n        this.makePlayableTo(damaPiece);\r\n    }\r\n\r\n    makePlayableTo(damaPiece){\r\n        //this is tile\r\n\r\n        this.playableTo = damaPiece;\r\n        this.cellElem.classList.add('playable');\r\n    }\r\n\r\n    clearPlayable(){\r\n        this.playableTo = null;\r\n        this.eatableTo = null;\r\n        this.canEat = null;\r\n    }\r\n\r\n    makeNull(){\r\n        this.type = null;\r\n        this.isKing = false;\r\n        this.clearPlayable();\r\n    }\r\n\r\n    eaten(){\r\n        // let j = $(this.imgElem);\r\n        \r\n        // return j.animate({\r\n        //     opacity: \"0\",\r\n        // }, 500, () => {\r\n        //     this.makeNull();\r\n        // }).promise();\r\n\r\n        return TweenMax.to(this.imgElem, 0.5, {\r\n            opacity: 0, \r\n            onComplete: () => {\r\n                this.makeNull();\r\n            }\r\n        });\r\n    }\r\n\r\n    checkKing(){\r\n        if(this.type === 'yellow' && this.row === 0){\r\n            this.isKing = true;\r\n        }else if(this.type === 'black' && this.row === 7){\r\n            this.isKing = true;\r\n        }\r\n    }\r\n}\r\n\r\n// class canEat{\r\n//     constructor(){\r\n//\r\n//     }\r\n// }\r\n\r\n\r\nclass Board{\r\n    // boardPieces;\r\n    // turn;\r\n    // canEat; [] of objects\r\n    // yellowImage;\r\n    // yellowKingImage;\r\n    // blackImage;\r\n    // blackKingImage;\r\n\r\n    constructor(){\r\n        // let boardColors = [\r\n        //     ['yellow', null, null, null, null, null, null, null],\r\n        //     ['yellow', 'black', 'black', 'black', 'black', null, 'black', null],\r\n        //     ['black', 'black', 'black', 'black', 'black', 'black', 'black', null],\r\n        //     [null, null, null, null, null, null, null, null],\r\n        //     [null, null, 'black', 'yellow', null, null, null, null],\r\n        //     ['yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', null],\r\n        //     ['black', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', null],\r\n        //     ['black', null, null, null, null, null, null, 'yellow'],\r\n        // ];\r\n        //for Testing\r\n\r\n        let boardColors = [\r\n            [null, null, null, null, null, null, null, null],\r\n            ['black', 'black', 'black', 'black', 'black', 'black', 'black', 'black'],\r\n            ['black', 'black', 'black', 'black', 'black', 'black', 'black', 'black'],\r\n            // [null, null, null, null, null, null, null, 'black'],\r\n            // [null, null, null, null, null, null, null, null],\r\n            // [null, null, null, null, null, null, null, 'yellow'],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            ['yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow'],\r\n            ['yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow'],\r\n            [null, null, null, null, null, null, null, null],\r\n        ];\r\n        \r\n        \r\n        this.boardPieces = boardColors.map((rowArray, row) => {\r\n            return rowArray.map((cellItem, column) => {\r\n                if(cellItem === null)\r\n                    return new DamaPiece(null, false, row, column);\r\n                else if(cellItem === 'black')\r\n                    return new DamaPiece('black', false, row, column);\r\n                else if(cellItem === 'yellow')\r\n                    return new DamaPiece('yellow', false, row, column);\r\n            });\r\n        });\r\n\r\n\r\n        this.turn = 'yellow';\r\n\r\n        this.canEatAgain = false;\r\n        \r\n        this.canEat = [];\r\n        \r\n        // this.getDamaPieceOn(7, 7).isKing = true; //FIXME DELETE FOR TESTING ONLY!\r\n        // this.getDamaPieceOn(1, 5).isKing = true; //FIXME DELETE FOR TESTING ONLY!\r\n        // this.getDamaPieceOn(1, 6).isKing = true; //FIXME DELETE FOR TESTING ONLY!\r\n        // this.getDamaPieceOn(2, 6).isKing = true; //FIXME DELETE FOR TESTING ONLY!\r\n        // this.getDamaPieceOn(5, 6).isKing = true; //FIXME DELETE FOR TESTING ONLY!\r\n        // this.getDamaPieceOn(0, 7).isKing = true; //FIXME DELETE FOR TESTING ONLY!\r\n\r\n        // let image = new Image();\r\n        // image.src = 'assets/YellowDama.png';\r\n        // image.classList.add('damaPiece');\r\n        // this.yellowImage = image;\r\n        //\r\n        // image = new Image();\r\n        // image.src = 'assets/YellowDamaKing.png';\r\n        // image.classList.add('damaPiece');\r\n        // this.yellowKingImage = image;\r\n        //\r\n        // image = new Image();\r\n        // image.src = 'assets/BlackDama.png';\r\n        // image.classList.add('damaPiece');\r\n        // this.blackImage = image;\r\n        //\r\n        // image = new Image();\r\n        // image.src = 'assets/BlackDamaKing.png';\r\n        // image.classList.add('damaPiece');\r\n        // this.blackKingImage = image;\r\n        \r\n        this.render();\r\n    }\r\n\r\n    isTurn(damaPiece) {\r\n        return this.turn === damaPiece.type;\r\n    }\r\n    \r\n    changeTurn(damaPiece){\r\n        if(this.turn === 'yellow')\r\n            this.turn = 'black';\r\n        else\r\n            this.turn = 'yellow';\r\n        \r\n        this.updateCanEat();\r\n    }\r\n\r\n    getDamaPieceOn(row, column){\r\n        return this.boardPieces[row][column];\r\n    };\r\n    setDamaPieceOn(damaPiece, row, column){\r\n        // console.log(this.boardPieces);\r\n        let damaPieceNew = new DamaPiece(damaPiece.type, damaPiece.isKing, row, column);\r\n        this.boardPieces[row][column] = damaPieceNew;\r\n        return damaPieceNew;\r\n    };\r\n\r\n    // {\r\n    //     damaPiece //who can eat\r\n    //     canEat //who will get eaten\r\n    //     tile //tile to set on\r\n    // }\r\n    \r\n    // pushCanEat(damaPiece, canEat, tile){\r\n    pushCanEat(damaPiece){\r\n        // let object = {\r\n        //     damaPiece: damaPiece,\r\n        //     canEat: canEat,\r\n        //     tile: tile,\r\n        // };\r\n\r\n        this.canEat.push(damaPiece);\r\n    }\r\n\r\n    updateCanEat(){\r\n        for(let piece of this.canEat){\r\n            if(!this.showEatable(piece, false)){\r\n                //cant eat anymore\r\n                this.removeCanEat(piece);\r\n            }\r\n            \r\n            if(piece.type === null)\r\n                this.removeCanEat(piece);\r\n        }\r\n    }\r\n\r\n    getForwardDamaPieceOfYellow(damaPiece){\r\n        let row = damaPiece.row;\r\n        let column = damaPiece.column;\r\n\r\n        if(row === 0)\r\n            return null; //means out of bound\r\n\r\n        let forwardRow = row - 1;\r\n        let forwardColumn = column;\r\n\r\n        return this.getDamaPieceOn(forwardRow, forwardColumn);\r\n    }\r\n    getForwardDamaPieceOfBlack(damaPiece){\r\n        let row = damaPiece.row;\r\n        let column = damaPiece.column;\r\n\r\n        if(row === 7)\r\n            return null; //means out of bound\r\n\r\n        let forwardRow = row + 1;\r\n        let forwardColumn = column;\r\n\r\n        return this.getDamaPieceOn(forwardRow, forwardColumn);\r\n    }\r\n    /**\r\n     *\r\n     * @param damaPiece DamaPiece to look forward of\r\n     * @param steps optional number of steps forward\r\n     * @param base\r\n     * @returns {DamaPiece, null} DamaPiece if inside Board and null if out of bound.\r\n     */\r\n    getForwardDamaPiece(damaPiece, steps = 1, base = damaPiece){\r\n        if(damaPiece == null)\r\n            return null; //out of bound !important\r\n\r\n        if(steps === 0){\r\n            return damaPiece;\r\n        }\r\n\r\n        if(steps > 0){\r\n            let forwardPiece;\r\n            if(base.type === 'yellow')\r\n                forwardPiece = this.getForwardDamaPieceOfYellow(damaPiece);\r\n            else if(base.type === 'black')\r\n                forwardPiece = this.getForwardDamaPieceOfBlack(damaPiece);\r\n            else\r\n                throw \"calling on null dama piece.\";\r\n\r\n            // console.log(steps - 1);\r\n            // console.log(forwardPiece);\r\n            return this.getForwardDamaPiece(forwardPiece, steps - 1, base);\r\n        }\r\n    }\r\n\r\n    getRightDamaPieceOfYellow(damaPiece){\r\n        let row = damaPiece.row;\r\n        let column = damaPiece.column;\r\n\r\n        if(column === 7)\r\n            return null; //means out of bound\r\n\r\n        let rightRow = row;\r\n        let rightColumn = column + 1;\r\n\r\n        return this.getDamaPieceOn(rightRow, rightColumn);\r\n    }\r\n    getRightDamaPieceOfBlack(damaPiece){\r\n        let row = damaPiece.row;\r\n        let column = damaPiece.column;\r\n\r\n        if(column === 0)\r\n            return null; //means out of bound\r\n\r\n        let rightRow = row;\r\n        let rightColumn = column - 1;\r\n\r\n        return this.getDamaPieceOn(rightRow, rightColumn);\r\n    }\r\n    getRightDamaPiece(damaPiece, steps = 1, base = damaPiece){\r\n        if(damaPiece == null)\r\n            return null; //out of bound !important\r\n\r\n        if(steps === 0){\r\n            return damaPiece;\r\n        }\r\n\r\n        if(steps > 0){\r\n            let rightPiece;\r\n            if(base.type === 'yellow')\r\n                rightPiece = this.getRightDamaPieceOfYellow(damaPiece);\r\n            else if(base.type === 'black')\r\n                rightPiece = this.getRightDamaPieceOfBlack(damaPiece);\r\n            else\r\n                throw \"calling on null dama piece.\";\r\n\r\n            return this.getRightDamaPiece(rightPiece, steps - 1, base);\r\n        }\r\n    }\r\n\r\n    getLeftDamaPieceOfYellow(damaPiece){\r\n        let row = damaPiece.row;\r\n        let column = damaPiece.column;\r\n\r\n        if(column === 0)\r\n            return null; //means out of bound\r\n\r\n        let rightRow = row;\r\n        let rightColumn = column - 1;\r\n\r\n        return this.getDamaPieceOn(rightRow, rightColumn);\r\n    }\r\n    getLeftDamaPieceOfBlack(damaPiece){\r\n        let row = damaPiece.row;\r\n        let column = damaPiece.column;\r\n\r\n        if(column === 7)\r\n            return null; //means out of bound\r\n\r\n        let rightRow = row;\r\n        let rightColumn = column + 1;\r\n\r\n        return this.getDamaPieceOn(rightRow, rightColumn);\r\n    }\r\n    getLeftDamaPiece(damaPiece, steps = 1, base = damaPiece){\r\n        if(damaPiece == null)\r\n            return null; //out of bound !important\r\n\r\n        if(steps === 0){\r\n            return damaPiece;\r\n        }\r\n\r\n        if(steps > 0){\r\n            let leftPiece;\r\n            if(base.type === 'yellow')\r\n                leftPiece = this.getLeftDamaPieceOfYellow(damaPiece);\r\n            else if(base.type === 'black')\r\n                leftPiece = this.getLeftDamaPieceOfBlack(damaPiece);\r\n            else\r\n                throw \"calling on null dama piece.\";\r\n\r\n            return this.getLeftDamaPiece(leftPiece, steps - 1, base);\r\n        }\r\n    }\r\n\r\n    getBackwardDamaPieceOfYellow(damaPiece){\r\n        let row = damaPiece.row;\r\n        let column = damaPiece.column;\r\n\r\n        if(row === 7)\r\n            return null; //means out of bound\r\n\r\n        let backwardRow = row + 1;\r\n        let backwardColumn = column;\r\n\r\n        return this.getDamaPieceOn(backwardRow, backwardColumn);\r\n    }\r\n    getBackwardDamaPieceOfBlack(damaPiece){\r\n        let row = damaPiece.row;\r\n        let column = damaPiece.column;\r\n\r\n        if(row === 0)\r\n            return null; //means out of bound\r\n\r\n        let backwardRow = row - 1;\r\n        let backwardColumn = column;\r\n\r\n        return this.getDamaPieceOn(backwardRow, backwardColumn);\r\n    }\r\n    getBackwardDamaPiece(damaPiece, steps = 1, base = damaPiece){\r\n        if(damaPiece == null)\r\n            return null; //out of bound !important\r\n\r\n        if(steps === 0){\r\n            return damaPiece;\r\n        }\r\n\r\n        if(steps > 0){\r\n            let backwardPiece;\r\n            if(base.type === 'yellow')\r\n                backwardPiece = this.getBackwardDamaPieceOfYellow(damaPiece);\r\n            else if(base.type === 'black')\r\n                backwardPiece = this.getBackwardDamaPieceOfBlack(damaPiece);\r\n            else\r\n                throw \"calling on null dama piece.\";\r\n\r\n            return this.getBackwardDamaPiece(backwardPiece, steps - 1, base);\r\n        }\r\n    }\r\n\r\n    getPlayableTo(damaPiece){\r\n        let cellElem = damaPiece.cellElem;\r\n        let playableTo = $(cellElem).data('playable');\r\n\r\n        if(playableTo !== \"\")\r\n            return playableTo;\r\n        else\r\n            return null;\r\n    }\r\n\r\n    removeCanEat(damaPiece){\r\n        this.canEat = this.canEat.filter(e => e !== damaPiece);\r\n    }\r\n\r\n    //FIXME:: STORE PLAYABLE TILES AND ONLY CLEAR THOSE;\r\n    clearAllPlayable(){\r\n        this.boardPieces.forEach(function(row) {\r\n            row.forEach(function(damaPiece) {\r\n                damaPiece.clearPlayable();\r\n            });\r\n        });\r\n        let playable = $('.playable');\r\n        playable.removeClass('playable');\r\n        \r\n    }\r\n\r\n    relationBetween(damaPiece, tile){\r\n        if(damaPiece.row < tile.row){\r\n            return 'above';\r\n        }\r\n        if(damaPiece.row > tile.row){\r\n            return 'below';\r\n        }\r\n        if(damaPiece.column > tile.column){\r\n            return 'right';\r\n        }\r\n        if(damaPiece.column < tile.column){\r\n            return 'left';\r\n        }\r\n    }\r\n\r\n    diffBetweenDamaPieces(damaPiece1, damaPiece2){\r\n        let damaPiece1Bounding = damaPiece1.cellElem.getBoundingClientRect();\r\n        let damaPiece2Bounding = damaPiece2.cellElem.getBoundingClientRect();\r\n\r\n        let diffX = damaPiece1Bounding.x - damaPiece2Bounding.x;\r\n        let diffY = damaPiece1Bounding.y - damaPiece2Bounding.y;\r\n\r\n        return {\r\n            x: diffX,\r\n            y: diffY,\r\n        };\r\n    }\r\n\r\n    \r\n    \r\n    onMove(damaPiece, tile){\r\n        let newRow = tile.row;\r\n        let newColumn = tile.column;\r\n\r\n        let oldRow = damaPiece.row;\r\n        let oldColumn = damaPiece.column;\r\n\r\n        let newDamaPiece = this.getDamaPieceOn(newRow, newColumn);\r\n        \r\n        newDamaPiece.checkKing();\r\n        // console.log(newDamaPiece);\r\n        \r\n        if(!this.canEatAgain){\r\n            this.changeTurn();\r\n        }\r\n        this.checkCanEat(newRow, newColumn, oldRow, oldColumn);\r\n        // this.changeTurn();\r\n        // this.checkCanEat(newRow, newColumn, oldRow, oldColumn);\r\n        \r\n        this.render();\r\n    }\r\n\r\n    move(damaPiece, tile){\r\n        let imgElem = damaPiece.imgElem;\r\n        \r\n        let diff = this.diffBetweenDamaPieces(damaPiece, tile);\r\n        let animationObj = {\r\n            bottom: diff.y,\r\n            right: diff.x,\r\n            lazy: true,\r\n            onComplete: () => {\r\n                this.setDamaPieceOn(damaPiece, tile.row, tile.column);\r\n                this.setDamaPieceOn(tile, damaPiece.row, damaPiece.column);\r\n            },\r\n        };\r\n        this.clearAllPlayable();\r\n\r\n        // let newRow = tile.row;\r\n        // let newColumn = tile.column;\r\n        //\r\n        // let oldRow = damaPiece.row;\r\n        // let oldColumn = damaPiece.column;\r\n        \r\n        // animate\r\n        // return $(imgElem).animate(animationObj, 300, () => {\r\n        //     this.setDamaPieceOn(damaPiece, tile.row, tile.column);\r\n        //     this.setDamaPieceOn(tile, damaPiece.row, damaPiece.column);\r\n        // }).promise();\r\n        \r\n        return TweenMax.to(imgElem, 0.3, animationObj);\r\n        // $(imgElem).animate(animationObj, 300, () => {\r\n        //     this.setDamaPieceOn(damaPiece, tile.row, tile.column);\r\n        //     this.setDamaPieceOn(tile, damaPiece.row, damaPiece.column);\r\n        // }).promise();\r\n\r\n\r\n    }\r\n    \r\n    showFreeSpaceToMoveForKing(damaPiece, direction, base = damaPiece){\r\n        let tile;\r\n        let directions = ['forward', 'backward', 'right', 'left'];\r\n\r\n        for(let direction of directions){\r\n            if(direction === 'forward')\r\n                tile = this.getForwardDamaPiece(damaPiece, 1, base);\r\n            else if(direction === 'backward')\r\n                tile = this.getBackwardDamaPiece(damaPiece, 1, base);\r\n            else if(direction === 'right')\r\n                tile = this.getRightDamaPiece(damaPiece, 1, base);\r\n            else if(direction === 'left')\r\n                tile = this.getLeftDamaPiece(damaPiece, 1, base);\r\n\r\n            while(tile !== null && tile.type === null){\r\n                tile.makePlayableTo(base);\r\n\r\n                if(direction === 'forward')\r\n                    tile = this.getForwardDamaPiece(tile, 1, base);\r\n                else if(direction === 'backward')\r\n                    tile = this.getBackwardDamaPiece(tile, 1, base);\r\n                else if(direction === 'right')\r\n                    tile = this.getRightDamaPiece(tile, 1, base);\r\n                else if(direction === 'left')\r\n                    tile = this.getLeftDamaPiece(tile, 1, base);\r\n            }\r\n        }\r\n    }\r\n\r\n    showFreeSpaceToMoveForMan(damaPiece) {\r\n        let forwardPiece = this.getForwardDamaPiece(damaPiece);\r\n        let rightPiece = this.getRightDamaPiece(damaPiece);\r\n        let leftPiece = this.getLeftDamaPiece(damaPiece);\r\n\r\n        let surroundingPieces = [forwardPiece, rightPiece, leftPiece];\r\n        for(let tile of surroundingPieces){\r\n            if(tile === null) //out of bound\r\n                continue;\r\n\r\n            if(tile.type === null)\r\n                tile.makePlayableTo(damaPiece);\r\n        }\r\n    }\r\n\r\n    fakePlayable(damaPiece){\r\n        damaPiece.cellElem.classList.add('playable');\r\n    }\r\n\r\n    showFreeSpaceToMove(damaPiece) {\r\n        this.clearAllPlayable();\r\n\r\n        if(damaPiece === null)\r\n            throw \"Calling on null dama piece!\";\r\n\r\n        // this.fakePlayable(damaPiece);\r\n        if(damaPiece.isKing === false){\r\n            this.showFreeSpaceToMoveForMan(damaPiece);\r\n        }else if(damaPiece.isKing === true){\r\n            this.showFreeSpaceToMoveForKing(damaPiece);\r\n        }\r\n\r\n    }\r\n    \r\n    firstEncounterForward(damaPiece, base = damaPiece){\r\n        let surroundingPiece = this.getForwardDamaPiece(damaPiece, 1, base);\r\n        // console.log(forwardPiece);\r\n        if(surroundingPiece === null)\r\n            return null;\r\n        \r\n        if(surroundingPiece.type === null)\r\n            return this.firstEncounterForward(surroundingPiece, base);\r\n        else if(surroundingPiece.type !== null)\r\n            return surroundingPiece;\r\n    }\r\n    firstEncounterBackward(damaPiece, base = damaPiece){\r\n        let surroundingPiece = this.getBackwardDamaPiece(damaPiece, 1, base);\r\n        // console.log(forwardPiece);\r\n        if(surroundingPiece === null)\r\n            return null;\r\n\r\n        if(surroundingPiece.type === null)\r\n            return this.firstEncounterBackward(surroundingPiece, base);\r\n        else if(surroundingPiece.type !== null)\r\n            return surroundingPiece;\r\n    }\r\n    firstEncounterRight(damaPiece, base = damaPiece){\r\n        let surroundingPiece = this.getRightDamaPiece(damaPiece, 1, base);\r\n        // console.log(forwardPiece);\r\n        if(surroundingPiece === null)\r\n            return null;\r\n\r\n        if(surroundingPiece.type === null)\r\n            return this.firstEncounterRight(surroundingPiece, base);\r\n        else if(surroundingPiece.type !== null)\r\n            return surroundingPiece;\r\n    }\r\n    firstEncounterLeft(damaPiece, base = damaPiece){\r\n        let surroundingPiece = this.getLeftDamaPiece(damaPiece, 1, base);\r\n        // console.log(forwardPiece);\r\n        if(surroundingPiece === null)\r\n            return null;\r\n\r\n        if(surroundingPiece.type === null)\r\n            return this.firstEncounterLeft(surroundingPiece, base);\r\n        else if(surroundingPiece.type !== null)\r\n            return surroundingPiece;\r\n    }\r\n    \r\n    showEatableForKing(damaPiece, show = true){\r\n        // console.log(damaPiece);\r\n        let canEat = false;\r\n        \r\n        let forwardPiece = this.firstEncounterForward(damaPiece);\r\n        let doubleForwardPiece = this.getForwardDamaPiece(forwardPiece, 1, damaPiece);\r\n        let forwardNotNull = forwardPiece !== null && doubleForwardPiece !== null;\r\n\r\n        let backwardPiece = this.firstEncounterBackward(damaPiece);\r\n        let doubleBackwardPiece = this.getBackwardDamaPiece(backwardPiece, 1, damaPiece);\r\n        let backwardNotNull = backwardPiece !== null && doubleBackwardPiece !== null;\r\n\r\n        let rightPiece = this.firstEncounterRight(damaPiece);\r\n        let doubleRightPiece = this.getRightDamaPiece(rightPiece, 1, damaPiece);\r\n        let rightNotNull = rightPiece !== null && doubleRightPiece !== null;\r\n\r\n        let leftPiece = this.firstEncounterLeft(damaPiece);\r\n        let doubleLeftPiece = this.getLeftDamaPiece(leftPiece, 1, damaPiece);\r\n        let leftNotNull = leftPiece !== null && doubleLeftPiece !== null;\r\n\r\n        // console.log(forwardPiece, backwardPiece, rightPiece, leftPiece);\r\n        // console.log(doubleForwardPiece, doubleBackwardPiece, doubleRightPiece, doubleLeftPiece);\r\n        \r\n        if(forwardNotNull && forwardPiece.oppositeOf(damaPiece) && doubleForwardPiece.type === null){\r\n            // console.log('can eat:', forwardPiece);\r\n\r\n            while(doubleForwardPiece !== null && doubleForwardPiece.type === null){\r\n                if(show === true)\r\n                    doubleForwardPiece.makeEatableTo(damaPiece, forwardPiece);\r\n                canEat = true;\r\n\r\n                doubleForwardPiece = this.getForwardDamaPiece(doubleForwardPiece, 1, damaPiece);\r\n            }\r\n        }\r\n        \r\n        if(backwardNotNull && backwardPiece.oppositeOf(damaPiece) && doubleBackwardPiece.type === null){\r\n            while(doubleBackwardPiece !== null && doubleBackwardPiece.type === null){\r\n                if(show === true)\r\n                    doubleBackwardPiece.makeEatableTo(damaPiece, backwardPiece);\r\n                canEat = true;\r\n\r\n                doubleBackwardPiece = this.getBackwardDamaPiece(doubleBackwardPiece, 1, damaPiece);\r\n            }\r\n        }\r\n\r\n        if(rightNotNull && rightPiece.oppositeOf(damaPiece) && doubleRightPiece.type === null){\r\n            while(doubleRightPiece !== null && doubleRightPiece.type === null){\r\n                if(show === true)\r\n                    doubleRightPiece.makeEatableTo(damaPiece, rightPiece);\r\n                canEat = true;\r\n\r\n                doubleRightPiece = this.getRightDamaPiece(doubleRightPiece, 1, damaPiece);\r\n            }\r\n        }\r\n\r\n        if(leftNotNull && leftPiece.oppositeOf(damaPiece) && doubleLeftPiece.type === null){\r\n            while(doubleLeftPiece !== null && doubleLeftPiece.type === null){\r\n                if(show === true)\r\n                    doubleLeftPiece.makeEatableTo(damaPiece, leftPiece);\r\n                canEat = true;\r\n\r\n                doubleLeftPiece = this.getLeftDamaPiece(doubleLeftPiece, 1, damaPiece);\r\n            }\r\n        }\r\n        \r\n        return canEat;\r\n        \r\n        // let directions = ['forward', 'backward', 'right', 'left']; //TODO HAVE (this.firstEncounter) (this.get-DIR-DamaPiece) accepet direction as String to use loops\r\n        //\r\n        // for(let direction of directions){\r\n        //     let piece = this.firstEncounterForward(damaPiece);\r\n        //     let doublePiece = this.getForwardDamaPiece(forwardPiece, 1, damaPiece);\r\n        //     let piecesNotNull = piece !== null && doublePiece !== null;\r\n        // }\r\n    }\r\n    \r\n    showEatableForMan(damaPiece, show = true){\r\n        let canEat = false;\r\n        let forwardPiece = this.getForwardDamaPiece(damaPiece);\r\n        let doubleForwardPiece = this.getForwardDamaPiece(forwardPiece, 1, damaPiece);\r\n        let rightPiece = this.getRightDamaPiece(damaPiece);\r\n        let doubleRightPiece = this.getRightDamaPiece(rightPiece, 1, damaPiece);\r\n        let leftPiece = this.getLeftDamaPiece(damaPiece);\r\n        let doubleLeftPiece = this.getLeftDamaPiece(leftPiece, 1, damaPiece);\r\n\r\n        let surroundingPieces = [forwardPiece, rightPiece, leftPiece];\r\n        let doubleSurroundingPieces = [doubleForwardPiece, doubleRightPiece, doubleLeftPiece];\r\n\r\n        for(let i = 0; i < surroundingPieces.length; i++){\r\n            let surroundingPiece = surroundingPieces[i];\r\n            let doubleSurroundingPiece = doubleSurroundingPieces[i];\r\n\r\n            if(surroundingPiece === null) //out of bound\r\n                continue;\r\n\r\n            if (surroundingPiece.type !== null && surroundingPiece.oppositeOf(damaPiece) && doubleSurroundingPiece !== null && doubleSurroundingPiece.type === null) {\r\n                if(show === true)\r\n                    doubleSurroundingPiece.makeEatableTo(damaPiece, surroundingPiece);\r\n                canEat = true;\r\n            }\r\n            // this.makePlayable(tile, damaPiece);\r\n        }\r\n        \r\n        return canEat;\r\n    }\r\n    \r\n    showEatable(damaPiece, show = true){\r\n        this.clearAllPlayable();\r\n\r\n        let canEat = false;\r\n\r\n        if(damaPiece === null)\r\n            throw \"Calling on null\";\r\n\r\n        if(damaPiece.type === null)\r\n            return false;\r\n\r\n        if(damaPiece.isKing === false){\r\n            canEat = this.showEatableForMan(damaPiece, show);\r\n        }else if(damaPiece.isKing === true){\r\n            canEat = this.showEatableForKing(damaPiece, show);\r\n        }\r\n\r\n        return canEat;\r\n    }\r\n    \r\n    checkCanEat(newRow, newColumn, oldRow, oldColumn){\r\n        let toCheck = [];\r\n        \r\n        for(let piece of this.boardPieces[newRow]){\r\n            //check on newRow\r\n            toCheck.push(piece);\r\n            // console.log(piece);\r\n        }\r\n        \r\n        for(let row = 0; row < 8; row++){\r\n            //check on newColumn\r\n            if(row === newRow)\r\n                continue; //to prevent checking twice\r\n            \r\n            let piece = this.getDamaPieceOn(row, newColumn);\r\n            toCheck.push(piece);\r\n        }\r\n        \r\n        if(newRow === oldRow) {\r\n            //check 2 column 1 row -- moved horizontally\r\n            //check oldColumn\r\n            for (let row = 0; row < 8; row++) {\r\n                //check on newColumn\r\n                let piece = this.getDamaPieceOn(row, oldColumn);\r\n                toCheck.push(piece);\r\n            }\r\n        }else{\r\n            //check 1 column 2 row -- moved verticaly\r\n            //check oldRow\r\n            for (let piece of this.boardPieces[oldRow])\r\n                toCheck.push(piece);\r\n        }\r\n\r\n        for (let piece of toCheck) {\r\n            // if(this.isTurn(piece) && this.showEatable(piece, false)) {\r\n            if(this.showEatable(piece, false)) {\r\n                this.pushCanEat(piece);\r\n                // console.log(this.canEat);\r\n            }\r\n        }\r\n    }\r\n    \r\n    typeCanEat(type){\r\n        for(let piece of this.canEat){\r\n            if(piece.type === type) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleClickDamaPiece(damaPiece){\r\n        if(damaPiece.type === this.turn) {\r\n            if(this.canEat.length !== 0 && this.typeCanEat(damaPiece.type)){\r\n                //some dama piece can eat\r\n                if (this.canEat.includes(damaPiece)) {\r\n                    //should eat\r\n                    this.showEatable(damaPiece);\r\n                }\r\n            }else{\r\n                let canEat = this.showEatable(damaPiece);\r\n                if (!canEat)\r\n                    this.showFreeSpaceToMove(damaPiece);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleClickTile(tile){\r\n        let playableTo = tile.playableTo;\r\n\r\n        if(playableTo !== null){\r\n            if(tile.canEat !== null){\r\n                //has eaten, remove from this.canEat\r\n                let damaPiece = tile.eatableTo; //who can eat\r\n                this.removeCanEat(damaPiece);\r\n                \r\n                var eaten = tile.canEat.eaten();\r\n            }\r\n            // else{\r\n            //     this.canEatAgain = false;\r\n            // }\r\n            \r\n            var moved = this.move(playableTo, tile);\r\n\r\n            $.when(eaten, moved).then(() => {\r\n                if(eaten !== undefined){\r\n                    let damaPiece = this.getDamaPieceOn(tile.row, tile.column);\r\n                    this.canEatAgain = this.showEatable(damaPiece, false);\r\n                }\r\n                \r\n                this.onMove(playableTo, tile);\r\n            });\r\n        }\r\n    }\r\n\r\n    handleClick(row, column){\r\n        let damaPiece = this.getDamaPieceOn(row, column);\r\n\r\n        if(damaPiece.type !== null) {\r\n            this.handleClickDamaPiece(damaPiece);\r\n        }else{\r\n            this.handleClickTile(damaPiece);\r\n        }\r\n    }\r\n\r\n    setImage(damaPiece) {\r\n        let image = new Image();\r\n        image.classList.add('damaPiece');\r\n        if(damaPiece.type === 'black') {\r\n            image.classList.add('blackDamaPiece');\r\n        }\r\n\r\n        if (damaPiece.type === null) {\r\n            return;\r\n        }\r\n\r\n        if(damaPiece.type === 'black') {\r\n            if (damaPiece.isKing)\r\n                image.src = 'assets/BlackDamaKing-m-min.png';\r\n            else\r\n                image.src = 'assets/BlackDama-m-min.png';\r\n        }else if(damaPiece.type === 'yellow') {\r\n            if (damaPiece.isKing)\r\n                image.src = 'assets/YellowDamaKing-m-min.png';\r\n            else\r\n                image.src = 'assets/YellowDama-m-min.png';\r\n        }\r\n        \r\n        damaPiece.cellElem.append(image); //FIXME NOOOWW!!!!!\r\n        // console.log($(damaPiece.cellElem).append('<div class=\"circle\"></div>').children()[0]);\r\n        \r\n        damaPiece.imgElem = image;\r\n        // damaPiece.imgElem = $(damaPiece.cellElem).append('<div class=\"circle\"></div>').children()[0]; //FIXME :: image\r\n    }\r\n    clearImages(){\r\n        $('.damaPiece').remove();\r\n    }\r\n\r\n    checkWin(yellowCount, blackCount){\r\n        let wonText = null;\r\n        if(yellowCount === 0){\r\n            wonText = 'فاز الأسود!';\r\n        }else if(blackCount === 0){\r\n            wonText = 'فاز الأصفر!';\r\n        }\r\n        \r\n        if(wonText !== null)\r\n            $('#winner').css({\r\n                display: 'flex'\r\n            });\r\n        \r\n        $('#winner').append(wonText);\r\n        \r\n        console.log(wonText);\r\n    }\r\n\r\n    render(){\r\n        let blackCount = 0;\r\n        let yellowCount = 0;\r\n        this.clearImages();\r\n\r\n        for(let row = 0; row < this.boardPieces.length; row++){\r\n            let boardPiecesRow = this.boardPieces[row];\r\n            for(let column = 0; column < boardPiecesRow.length; column++) {\r\n                let damaPiece = this.boardPieces[row][column];\r\n                if(damaPiece.type === 'black')\r\n                    blackCount++;\r\n                if(damaPiece.type === 'yellow')\r\n                    yellowCount++;\r\n                this.setImage(damaPiece);\r\n            }\r\n        }\r\n\r\n        this.checkWin(yellowCount, blackCount);\r\n    }\r\n    \r\n    renderPiece(damaPiece){\r\n        this.clearImages();\r\n\r\n        for(let row = 0; row < this.boardPieces.length; row++){\r\n            let boardPiecesRow = this.boardPieces[row];\r\n            for(let column = 0; column < boardPiecesRow.length; column++) {\r\n                let damaPiece = this.boardPieces[row][column];\r\n                this.setImage(damaPiece);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nlet boardObj = new Board();\r\n//\r\n// document.getElementsByTagName('body').ontouchstart = (e) => {\r\n//     alert('tock');\r\n//     e.preventDefault();\r\n// };\r\n\r\n//handle on click on  cell's\r\n$('.cell').click(function (e) {\r\n    let row = $(this).data('row');\r\n    let column = $(this).data('column');\r\n\r\n    boardObj.handleClick(row, column);\r\n});\r\n"],"file":"script.js"}